// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ListLaunched extends ethereum.Event {
  get params(): ListLaunched__Params {
    return new ListLaunched__Params(this);
  }
}

export class ListLaunched__Params {
  _event: ListLaunched;

  constructor(event: ListLaunched) {
    this._event = event;
  }

  get participantList(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ParticipantListLauncher extends ethereum.SmartContract {
  static bind(address: Address): ParticipantListLauncher {
    return new ParticipantListLauncher("ParticipantListLauncher", address);
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  launchParticipantList(managers: Array<Address>): Address {
    let result = super.call(
      "launchParticipantList",
      "launchParticipantList(address[]):(address)",
      [ethereum.Value.fromAddressArray(managers)]
    );

    return result[0].toAddress();
  }

  try_launchParticipantList(
    managers: Array<Address>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "launchParticipantList",
      "launchParticipantList(address[]):(address)",
      [ethereum.Value.fromAddressArray(managers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participantListTemplate(): Address {
    let result = super.call(
      "participantListTemplate",
      "participantListTemplate():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_participantListTemplate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "participantListTemplate",
      "participantListTemplate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _participantListTemplate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LaunchParticipantListCall extends ethereum.Call {
  get inputs(): LaunchParticipantListCall__Inputs {
    return new LaunchParticipantListCall__Inputs(this);
  }

  get outputs(): LaunchParticipantListCall__Outputs {
    return new LaunchParticipantListCall__Outputs(this);
  }
}

export class LaunchParticipantListCall__Inputs {
  _call: LaunchParticipantListCall;

  constructor(call: LaunchParticipantListCall) {
    this._call = call;
  }

  get managers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class LaunchParticipantListCall__Outputs {
  _call: LaunchParticipantListCall;

  constructor(call: LaunchParticipantListCall) {
    this._call = call;
  }

  get newList(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
