// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewPurchase extends ethereum.Event {
  get params(): NewPurchase__Params {
    return new NewPurchase__Params(this);
  }
}

export class NewPurchase__Params {
  _event: NewPurchase;

  constructor(event: NewPurchase) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewTokenClaim extends ethereum.Event {
  get params(): NewTokenClaim__Params {
    return new NewTokenClaim__Params(this);
  }
}

export class NewTokenClaim__Params {
  _event: NewTokenClaim;

  constructor(event: NewTokenClaim) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewTokenRelease extends ethereum.Event {
  get params(): NewTokenRelease__Params {
    return new NewTokenRelease__Params(this);
  }
}

export class NewTokenRelease__Params {
  _event: NewTokenRelease;

  constructor(event: NewTokenRelease) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SaleClosed extends ethereum.Event {
  get params(): SaleClosed__Params {
    return new SaleClosed__Params(this);
  }
}

export class SaleClosed__Params {
  _event: SaleClosed;

  constructor(event: SaleClosed) {
    this._event = event;
  }
}

export class SaleInitalized extends ethereum.Event {
  get params(): SaleInitalized__Params {
    return new SaleInitalized__Params(this);
  }
}

export class SaleInitalized__Params {
  _event: SaleInitalized;

  constructor(event: SaleInitalized) {
    this._event = event;
  }

  get tokenIn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensForSale(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get allocationMin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get allocationMax(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get minimumRaise(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class distributeAllTokensLeft extends ethereum.Event {
  get params(): distributeAllTokensLeft__Params {
    return new distributeAllTokensLeft__Params(this);
  }
}

export class distributeAllTokensLeft__Params {
  _event: distributeAllTokensLeft;

  constructor(event: distributeAllTokensLeft) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FixedPriceSale extends ethereum.SmartContract {
  static bind(address: Address): FixedPriceSale {
    return new FixedPriceSale("FixedPriceSale", address);
  }

  allocationMax(): BigInt {
    let result = super.call("allocationMax", "allocationMax():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allocationMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocationMax",
      "allocationMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allocationMin(): BigInt {
    let result = super.call("allocationMin", "allocationMin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allocationMin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocationMin",
      "allocationMin():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endDate(): BigInt {
    let result = super.call("endDate", "endDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endDate", "endDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isClosed(): boolean {
    let result = super.call("isClosed", "isClosed():(bool)", []);

    return result[0].toBoolean();
  }

  try_isClosed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClosed", "isClosed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minimumRaise(): BigInt {
    let result = super.call("minimumRaise", "minimumRaise():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minimumRaise(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minimumRaise", "minimumRaise():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderOwners(param0: BigInt): Address {
    let result = super.call("orderOwners", "orderOwners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_orderOwners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "orderOwners",
      "orderOwners(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ordersCount(): BigInt {
    let result = super.call("ordersCount", "ordersCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ordersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ordersCount", "ordersCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  secondsRemainingInSale(): BigInt {
    let result = super.call(
      "secondsRemainingInSale",
      "secondsRemainingInSale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondsRemainingInSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondsRemainingInSale",
      "secondsRemainingInSale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startDate(): BigInt {
    let result = super.call("startDate", "startDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startDate", "startDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  templateName(): string {
    let result = super.call("templateName", "templateName():(string)", []);

    return result[0].toString();
  }

  try_templateName(): ethereum.CallResult<string> {
    let result = super.tryCall("templateName", "templateName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenIn(): Address {
    let result = super.call("tokenIn", "tokenIn():(address)", []);

    return result[0].toAddress();
  }

  try_tokenIn(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenIn", "tokenIn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenOut(): Address {
    let result = super.call("tokenOut", "tokenOut():(address)", []);

    return result[0].toAddress();
  }

  try_tokenOut(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenOut", "tokenOut():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenPrice(): BigInt {
    let result = super.call("tokenPrice", "tokenPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensForSale(): BigInt {
    let result = super.call("tokensForSale", "tokensForSale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensForSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensForSale",
      "tokensForSale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensPurchased(param0: Address): BigInt {
    let result = super.call(
      "tokensPurchased",
      "tokensPurchased(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokensPurchased(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensPurchased",
      "tokensPurchased(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensRemaining(): BigInt {
    let result = super.call(
      "tokensRemaining",
      "tokensRemaining():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensRemaining(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensRemaining",
      "tokensRemaining():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensSold(): BigInt {
    let result = super.call("tokensSold", "tokensSold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensSold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokensSold", "tokensSold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ERC20WithdrawCall extends ethereum.Call {
  get inputs(): ERC20WithdrawCall__Inputs {
    return new ERC20WithdrawCall__Inputs(this);
  }

  get outputs(): ERC20WithdrawCall__Outputs {
    return new ERC20WithdrawCall__Outputs(this);
  }
}

export class ERC20WithdrawCall__Inputs {
  _call: ERC20WithdrawCall;

  constructor(call: ERC20WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ERC20WithdrawCall__Outputs {
  _call: ERC20WithdrawCall;

  constructor(call: ERC20WithdrawCall) {
    this._call = call;
  }
}

export class ETHWithdrawCall extends ethereum.Call {
  get inputs(): ETHWithdrawCall__Inputs {
    return new ETHWithdrawCall__Inputs(this);
  }

  get outputs(): ETHWithdrawCall__Outputs {
    return new ETHWithdrawCall__Outputs(this);
  }
}

export class ETHWithdrawCall__Inputs {
  _call: ETHWithdrawCall;

  constructor(call: ETHWithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ETHWithdrawCall__Outputs {
  _call: ETHWithdrawCall;

  constructor(call: ETHWithdrawCall) {
    this._call = call;
  }
}

export class BuyTokensCall extends ethereum.Call {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class CloseSaleCall extends ethereum.Call {
  get inputs(): CloseSaleCall__Inputs {
    return new CloseSaleCall__Inputs(this);
  }

  get outputs(): CloseSaleCall__Outputs {
    return new CloseSaleCall__Outputs(this);
  }
}

export class CloseSaleCall__Inputs {
  _call: CloseSaleCall;

  constructor(call: CloseSaleCall) {
    this._call = call;
  }
}

export class CloseSaleCall__Outputs {
  _call: CloseSaleCall;

  constructor(call: CloseSaleCall) {
    this._call = call;
  }
}

export class DistributeAllTokensCall extends ethereum.Call {
  get inputs(): DistributeAllTokensCall__Inputs {
    return new DistributeAllTokensCall__Inputs(this);
  }

  get outputs(): DistributeAllTokensCall__Outputs {
    return new DistributeAllTokensCall__Outputs(this);
  }
}

export class DistributeAllTokensCall__Inputs {
  _call: DistributeAllTokensCall;

  constructor(call: DistributeAllTokensCall) {
    this._call = call;
  }
}

export class DistributeAllTokensCall__Outputs {
  _call: DistributeAllTokensCall;

  constructor(call: DistributeAllTokensCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class ReleaseTokensCall extends ethereum.Call {
  get inputs(): ReleaseTokensCall__Inputs {
    return new ReleaseTokensCall__Inputs(this);
  }

  get outputs(): ReleaseTokensCall__Outputs {
    return new ReleaseTokensCall__Outputs(this);
  }
}

export class ReleaseTokensCall__Inputs {
  _call: ReleaseTokensCall;

  constructor(call: ReleaseTokensCall) {
    this._call = call;
  }
}

export class ReleaseTokensCall__Outputs {
  _call: ReleaseTokensCall;

  constructor(call: ReleaseTokensCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsWithParamsCall extends ethereum.Call {
  get inputs(): WithdrawFundsWithParamsCall__Inputs {
    return new WithdrawFundsWithParamsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsWithParamsCall__Outputs {
    return new WithdrawFundsWithParamsCall__Outputs(this);
  }
}

export class WithdrawFundsWithParamsCall__Inputs {
  _call: WithdrawFundsWithParamsCall;

  constructor(call: WithdrawFundsWithParamsCall) {
    this._call = call;
  }

  get _data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class WithdrawFundsWithParamsCall__Outputs {
  _call: WithdrawFundsWithParamsCall;

  constructor(call: WithdrawFundsWithParamsCall) {
    this._call = call;
  }
}

export class WithdrawUnsoldFundsCall extends ethereum.Call {
  get inputs(): WithdrawUnsoldFundsCall__Inputs {
    return new WithdrawUnsoldFundsCall__Inputs(this);
  }

  get outputs(): WithdrawUnsoldFundsCall__Outputs {
    return new WithdrawUnsoldFundsCall__Outputs(this);
  }
}

export class WithdrawUnsoldFundsCall__Inputs {
  _call: WithdrawUnsoldFundsCall;

  constructor(call: WithdrawUnsoldFundsCall) {
    this._call = call;
  }
}

export class WithdrawUnsoldFundsCall__Outputs {
  _call: WithdrawUnsoldFundsCall;

  constructor(call: WithdrawUnsoldFundsCall) {
    this._call = call;
  }
}
