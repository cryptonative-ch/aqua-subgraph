// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCleared extends ethereum.Event {
  get params(): AuctionCleared__Params {
    return new AuctionCleared__Params(this);
  }
}

export class AuctionCleared__Params {
  _event: AuctionCleared;

  constructor(event: AuctionCleared) {
    this._event = event;
  }

  get soldTokenOuts(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get soldTokenIns(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get clearingPriceOrder(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class AuctionInitialized extends ethereum.Event {
  get params(): AuctionInitialized__Params {
    return new AuctionInitialized__Params(this);
  }
}

export class AuctionInitialized__Params {
  _event: AuctionInitialized;

  constructor(event: AuctionInitialized) {
    this._event = event;
  }

  get tokenOut(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get orderCancellationEndDate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auctionEndDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get userId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get auctionedSellAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minBuyAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get minimumBiddingAmountPerOrder(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get minFundingThreshold(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class CancellationSellOrder extends ethereum.Event {
  get params(): CancellationSellOrder__Params {
    return new CancellationSellOrder__Params(this);
  }
}

export class CancellationSellOrder__Params {
  _event: CancellationSellOrder;

  constructor(event: CancellationSellOrder) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimedFromOrder extends ethereum.Event {
  get params(): ClaimedFromOrder__Params {
    return new ClaimedFromOrder__Params(this);
  }
}

export class ClaimedFromOrder__Params {
  _event: ClaimedFromOrder;

  constructor(event: ClaimedFromOrder) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewSellOrder extends ethereum.Event {
  get params(): NewSellOrder__Params {
    return new NewSellOrder__Params(this);
  }
}

export class NewSellOrder__Params {
  _event: NewSellOrder;

  constructor(event: NewSellOrder) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewUser extends ethereum.Event {
  get params(): NewUser__Params {
    return new NewUser__Params(this);
  }
}

export class NewUser__Params {
  _event: NewUser;

  constructor(event: NewUser) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UserRegistration extends ethereum.Event {
  get params(): UserRegistration__Params {
    return new UserRegistration__Params(this);
  }
}

export class UserRegistration__Params {
  _event: UserRegistration;

  constructor(event: UserRegistration) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FairSale__claimFromParticipantOrderResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class FairSale extends ethereum.SmartContract {
  static bind(address: Address): FairSale {
    return new FairSale("FairSale", address);
  }

  TEMPLATE_NAME(): string {
    let result = super.call("TEMPLATE_NAME", "TEMPLATE_NAME():(string)", []);

    return result[0].toString();
  }

  try_TEMPLATE_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("TEMPLATE_NAME", "TEMPLATE_NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  auctionEndDate(): BigInt {
    let result = super.call("auctionEndDate", "auctionEndDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionEndDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionEndDate",
      "auctionEndDate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimFromParticipantOrder(
    orders: Array<Bytes>
  ): FairSale__claimFromParticipantOrderResult {
    let result = super.call(
      "claimFromParticipantOrder",
      "claimFromParticipantOrder(bytes32[]):(uint256,uint256)",
      [ethereum.Value.fromFixedBytesArray(orders)]
    );

    return new FairSale__claimFromParticipantOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimFromParticipantOrder(
    orders: Array<Bytes>
  ): ethereum.CallResult<FairSale__claimFromParticipantOrderResult> {
    let result = super.tryCall(
      "claimFromParticipantOrder",
      "claimFromParticipantOrder(bytes32[]):(uint256,uint256)",
      [ethereum.Value.fromFixedBytesArray(orders)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FairSale__claimFromParticipantOrderResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  clearingPriceOrder(): Bytes {
    let result = super.call(
      "clearingPriceOrder",
      "clearingPriceOrder():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_clearingPriceOrder(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "clearingPriceOrder",
      "clearingPriceOrder():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  containsOrder(order: Bytes): boolean {
    let result = super.call("containsOrder", "containsOrder(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(order)
    ]);

    return result[0].toBoolean();
  }

  try_containsOrder(order: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "containsOrder",
      "containsOrder(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSecondsRemainingInBatch(): BigInt {
    let result = super.call(
      "getSecondsRemainingInBatch",
      "getSecondsRemainingInBatch():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSecondsRemainingInBatch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSecondsRemainingInBatch",
      "getSecondsRemainingInBatch():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserId(user: Address): BigInt {
    let result = super.call("getUserId", "getUserId(address):(uint64)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserId(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getUserId", "getUserId(address):(uint64)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialAuctionOrder(): Bytes {
    let result = super.call(
      "initialAuctionOrder",
      "initialAuctionOrder():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_initialAuctionOrder(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "initialAuctionOrder",
      "initialAuctionOrder():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interimOrder(): Bytes {
    let result = super.call("interimOrder", "interimOrder():(bytes32)", []);

    return result[0].toBytes();
  }

  try_interimOrder(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("interimOrder", "interimOrder():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  interimSumBidAmount(): BigInt {
    let result = super.call(
      "interimSumBidAmount",
      "interimSumBidAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interimSumBidAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interimSumBidAmount",
      "interimSumBidAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAtomicClosureAllowed(): boolean {
    let result = super.call(
      "isAtomicClosureAllowed",
      "isAtomicClosureAllowed():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isAtomicClosureAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAtomicClosureAllowed",
      "isAtomicClosureAllowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minFundingThreshold(): BigInt {
    let result = super.call(
      "minFundingThreshold",
      "minFundingThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minFundingThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minFundingThreshold",
      "minFundingThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minFundingThresholdNotReached(): boolean {
    let result = super.call(
      "minFundingThresholdNotReached",
      "minFundingThresholdNotReached():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_minFundingThresholdNotReached(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "minFundingThresholdNotReached",
      "minFundingThresholdNotReached():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minimumBiddingAmountPerOrder(): BigInt {
    let result = super.call(
      "minimumBiddingAmountPerOrder",
      "minimumBiddingAmountPerOrder():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumBiddingAmountPerOrder(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumBiddingAmountPerOrder",
      "minimumBiddingAmountPerOrder():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numUsers(): BigInt {
    let result = super.call("numUsers", "numUsers():(uint64)", []);

    return result[0].toBigInt();
  }

  try_numUsers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numUsers", "numUsers():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderCancellationEndDate(): BigInt {
    let result = super.call(
      "orderCancellationEndDate",
      "orderCancellationEndDate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_orderCancellationEndDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "orderCancellationEndDate",
      "orderCancellationEndDate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  placeSellOrders(
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "placeSellOrders",
      "placeSellOrders(uint96[],uint96[],bytes32[]):(uint64)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders)
      ]
    );

    return result[0].toBigInt();
  }

  try_placeSellOrders(
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placeSellOrders",
      "placeSellOrders(uint96[],uint96[],bytes32[]):(uint64)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  placeSellOrdersOnBehalf(
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>,
    orderSubmitter: Address
  ): BigInt {
    let result = super.call(
      "placeSellOrdersOnBehalf",
      "placeSellOrdersOnBehalf(uint96[],uint96[],bytes32[],address):(uint64)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders),
        ethereum.Value.fromAddress(orderSubmitter)
      ]
    );

    return result[0].toBigInt();
  }

  try_placeSellOrdersOnBehalf(
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>,
    orderSubmitter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placeSellOrdersOnBehalf",
      "placeSellOrdersOnBehalf(uint96[],uint96[],bytes32[],address):(uint64)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders),
        ethereum.Value.fromAddress(orderSubmitter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerUser(user: Address): BigInt {
    let result = super.call("registerUser", "registerUser(address):(uint64)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_registerUser(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerUser",
      "registerUser(address):(uint64)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settleAuction(): Bytes {
    let result = super.call("settleAuction", "settleAuction():(bytes32)", []);

    return result[0].toBytes();
  }

  try_settleAuction(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "settleAuction",
      "settleAuction():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenIn(): Address {
    let result = super.call("tokenIn", "tokenIn():(address)", []);

    return result[0].toAddress();
  }

  try_tokenIn(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenIn", "tokenIn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenOut(): Address {
    let result = super.call("tokenOut", "tokenOut():(address)", []);

    return result[0].toAddress();
  }

  try_tokenOut(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenOut", "tokenOut():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  volumeClearingPriceOrder(): BigInt {
    let result = super.call(
      "volumeClearingPriceOrder",
      "volumeClearingPriceOrder():(uint96)",
      []
    );

    return result[0].toBigInt();
  }

  try_volumeClearingPriceOrder(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "volumeClearingPriceOrder",
      "volumeClearingPriceOrder():(uint96)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelSellOrdersCall extends ethereum.Call {
  get inputs(): CancelSellOrdersCall__Inputs {
    return new CancelSellOrdersCall__Inputs(this);
  }

  get outputs(): CancelSellOrdersCall__Outputs {
    return new CancelSellOrdersCall__Outputs(this);
  }
}

export class CancelSellOrdersCall__Inputs {
  _call: CancelSellOrdersCall;

  constructor(call: CancelSellOrdersCall) {
    this._call = call;
  }

  get _sellOrders(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class CancelSellOrdersCall__Outputs {
  _call: CancelSellOrdersCall;

  constructor(call: CancelSellOrdersCall) {
    this._call = call;
  }
}

export class ClaimFromParticipantOrderCall extends ethereum.Call {
  get inputs(): ClaimFromParticipantOrderCall__Inputs {
    return new ClaimFromParticipantOrderCall__Inputs(this);
  }

  get outputs(): ClaimFromParticipantOrderCall__Outputs {
    return new ClaimFromParticipantOrderCall__Outputs(this);
  }
}

export class ClaimFromParticipantOrderCall__Inputs {
  _call: ClaimFromParticipantOrderCall;

  constructor(call: ClaimFromParticipantOrderCall) {
    this._call = call;
  }

  get orders(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class ClaimFromParticipantOrderCall__Outputs {
  _call: ClaimFromParticipantOrderCall;

  constructor(call: ClaimFromParticipantOrderCall) {
    this._call = call;
  }

  get sumTokenOutAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get sumTokenInAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class GetUserIdCall extends ethereum.Call {
  get inputs(): GetUserIdCall__Inputs {
    return new GetUserIdCall__Inputs(this);
  }

  get outputs(): GetUserIdCall__Outputs {
    return new GetUserIdCall__Outputs(this);
  }
}

export class GetUserIdCall__Inputs {
  _call: GetUserIdCall;

  constructor(call: GetUserIdCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetUserIdCall__Outputs {
  _call: GetUserIdCall;

  constructor(call: GetUserIdCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class PlaceSellOrdersCall extends ethereum.Call {
  get inputs(): PlaceSellOrdersCall__Inputs {
    return new PlaceSellOrdersCall__Inputs(this);
  }

  get outputs(): PlaceSellOrdersCall__Outputs {
    return new PlaceSellOrdersCall__Outputs(this);
  }
}

export class PlaceSellOrdersCall__Inputs {
  _call: PlaceSellOrdersCall;

  constructor(call: PlaceSellOrdersCall) {
    this._call = call;
  }

  get _minBuyAmounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _sellAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _prevSellOrders(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class PlaceSellOrdersCall__Outputs {
  _call: PlaceSellOrdersCall;

  constructor(call: PlaceSellOrdersCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PlaceSellOrdersOnBehalfCall extends ethereum.Call {
  get inputs(): PlaceSellOrdersOnBehalfCall__Inputs {
    return new PlaceSellOrdersOnBehalfCall__Inputs(this);
  }

  get outputs(): PlaceSellOrdersOnBehalfCall__Outputs {
    return new PlaceSellOrdersOnBehalfCall__Outputs(this);
  }
}

export class PlaceSellOrdersOnBehalfCall__Inputs {
  _call: PlaceSellOrdersOnBehalfCall;

  constructor(call: PlaceSellOrdersOnBehalfCall) {
    this._call = call;
  }

  get _minBuyAmounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _sellAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _prevSellOrders(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get orderSubmitter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class PlaceSellOrdersOnBehalfCall__Outputs {
  _call: PlaceSellOrdersOnBehalfCall;

  constructor(call: PlaceSellOrdersOnBehalfCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PrecalculateSellAmountSumCall extends ethereum.Call {
  get inputs(): PrecalculateSellAmountSumCall__Inputs {
    return new PrecalculateSellAmountSumCall__Inputs(this);
  }

  get outputs(): PrecalculateSellAmountSumCall__Outputs {
    return new PrecalculateSellAmountSumCall__Outputs(this);
  }
}

export class PrecalculateSellAmountSumCall__Inputs {
  _call: PrecalculateSellAmountSumCall;

  constructor(call: PrecalculateSellAmountSumCall) {
    this._call = call;
  }

  get iterationSteps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PrecalculateSellAmountSumCall__Outputs {
  _call: PrecalculateSellAmountSumCall;

  constructor(call: PrecalculateSellAmountSumCall) {
    this._call = call;
  }
}

export class RegisterUserCall extends ethereum.Call {
  get inputs(): RegisterUserCall__Inputs {
    return new RegisterUserCall__Inputs(this);
  }

  get outputs(): RegisterUserCall__Outputs {
    return new RegisterUserCall__Outputs(this);
  }
}

export class RegisterUserCall__Inputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterUserCall__Outputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SettleAuctionCall extends ethereum.Call {
  get inputs(): SettleAuctionCall__Inputs {
    return new SettleAuctionCall__Inputs(this);
  }

  get outputs(): SettleAuctionCall__Outputs {
    return new SettleAuctionCall__Outputs(this);
  }
}

export class SettleAuctionCall__Inputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }
}

export class SettleAuctionCall__Outputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }

  get clearingOrder(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SettleAuctionAtomicallyCall extends ethereum.Call {
  get inputs(): SettleAuctionAtomicallyCall__Inputs {
    return new SettleAuctionAtomicallyCall__Inputs(this);
  }

  get outputs(): SettleAuctionAtomicallyCall__Outputs {
    return new SettleAuctionAtomicallyCall__Outputs(this);
  }
}

export class SettleAuctionAtomicallyCall__Inputs {
  _call: SettleAuctionAtomicallyCall;

  constructor(call: SettleAuctionAtomicallyCall) {
    this._call = call;
  }

  get _minBuyAmount(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _sellAmount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _prevSellOrder(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class SettleAuctionAtomicallyCall__Outputs {
  _call: SettleAuctionAtomicallyCall;

  constructor(call: SettleAuctionAtomicallyCall) {
    this._call = call;
  }
}
