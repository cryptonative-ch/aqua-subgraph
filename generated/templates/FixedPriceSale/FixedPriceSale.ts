// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewCommitment extends ethereum.Event {
  get params(): NewCommitment__Params {
    return new NewCommitment__Params(this);
  }
}

export class NewCommitment__Params {
  _event: NewCommitment;

  constructor(event: NewCommitment) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewTokenRelease extends ethereum.Event {
  get params(): NewTokenRelease__Params {
    return new NewTokenRelease__Params(this);
  }
}

export class NewTokenRelease__Params {
  _event: NewTokenRelease;

  constructor(event: NewTokenRelease) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewTokenWithdraw extends ethereum.Event {
  get params(): NewTokenWithdraw__Params {
    return new NewTokenWithdraw__Params(this);
  }
}

export class NewTokenWithdraw__Params {
  _event: NewTokenWithdraw;

  constructor(event: NewTokenWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SaleClosed extends ethereum.Event {
  get params(): SaleClosed__Params {
    return new SaleClosed__Params(this);
  }
}

export class SaleClosed__Params {
  _event: SaleClosed;

  constructor(event: SaleClosed) {
    this._event = event;
  }
}

export class SaleInitialized extends ethereum.Event {
  get params(): SaleInitialized__Params {
    return new SaleInitialized__Params(this);
  }
}

export class SaleInitialized__Params {
  _event: SaleInitialized;

  constructor(event: SaleInitialized) {
    this._event = event;
  }

  get tokenIn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensForSale(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minCommitment(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get maxCommitment(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get minRaise(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get participantList(): Address {
    return this._event.parameters[10].value.toAddress();
  }
}

export class FixedPriceSale__saleInfoResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: boolean;
  value10: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: boolean,
    value10: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    return map;
  }
}

export class FixedPriceSale__saleStatusResult {
  value0: BigInt;
  value1: boolean;
  value2: boolean;
  value3: boolean;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: boolean,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class FixedPriceSale extends ethereum.SmartContract {
  static bind(address: Address): FixedPriceSale {
    return new FixedPriceSale("FixedPriceSale", address);
  }

  TEMPLATE_NAME(): string {
    let result = super.call("TEMPLATE_NAME", "TEMPLATE_NAME():(string)", []);

    return result[0].toString();
  }

  try_TEMPLATE_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("TEMPLATE_NAME", "TEMPLATE_NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  commitment(param0: Address): BigInt {
    let result = super.call("commitment", "commitment(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_commitment(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("commitment", "commitment(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMinRaiseReached(): boolean {
    let result = super.call(
      "isMinRaiseReached",
      "isMinRaiseReached():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isMinRaiseReached(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMinRaiseReached",
      "isMinRaiseReached():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSaleEnded(): boolean {
    let result = super.call("isSaleEnded", "isSaleEnded():(bool)", []);

    return result[0].toBoolean();
  }

  try_isSaleEnded(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSaleEnded", "isSaleEnded():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  remainingTokensForSale(): BigInt {
    let result = super.call(
      "remainingTokensForSale",
      "remainingTokensForSale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_remainingTokensForSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingTokensForSale",
      "remainingTokensForSale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleInfo(): FixedPriceSale__saleInfoResult {
    let result = super.call(
      "saleInfo",
      "saleInfo():(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,address)",
      []
    );

    return new FixedPriceSale__saleInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBoolean(),
      result[10].toAddress()
    );
  }

  try_saleInfo(): ethereum.CallResult<FixedPriceSale__saleInfoResult> {
    let result = super.tryCall(
      "saleInfo",
      "saleInfo():(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FixedPriceSale__saleInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBoolean(),
        value[10].toAddress()
      )
    );
  }

  saleStatus(): FixedPriceSale__saleStatusResult {
    let result = super.call(
      "saleStatus",
      "saleStatus():(uint256,bool,bool,bool)",
      []
    );

    return new FixedPriceSale__saleStatusResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBoolean()
    );
  }

  try_saleStatus(): ethereum.CallResult<FixedPriceSale__saleStatusResult> {
    let result = super.tryCall(
      "saleStatus",
      "saleStatus():(uint256,bool,bool,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FixedPriceSale__saleStatusResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBoolean()
      )
    );
  }

  secondsRemainingInSale(): BigInt {
    let result = super.call(
      "secondsRemainingInSale",
      "secondsRemainingInSale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondsRemainingInSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondsRemainingInSale",
      "secondsRemainingInSale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ERC20WithdrawCall extends ethereum.Call {
  get inputs(): ERC20WithdrawCall__Inputs {
    return new ERC20WithdrawCall__Inputs(this);
  }

  get outputs(): ERC20WithdrawCall__Outputs {
    return new ERC20WithdrawCall__Outputs(this);
  }
}

export class ERC20WithdrawCall__Inputs {
  _call: ERC20WithdrawCall;

  constructor(call: ERC20WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ERC20WithdrawCall__Outputs {
  _call: ERC20WithdrawCall;

  constructor(call: ERC20WithdrawCall) {
    this._call = call;
  }
}

export class ETHWithdrawCall extends ethereum.Call {
  get inputs(): ETHWithdrawCall__Inputs {
    return new ETHWithdrawCall__Inputs(this);
  }

  get outputs(): ETHWithdrawCall__Outputs {
    return new ETHWithdrawCall__Outputs(this);
  }
}

export class ETHWithdrawCall__Inputs {
  _call: ETHWithdrawCall;

  constructor(call: ETHWithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ETHWithdrawCall__Outputs {
  _call: ETHWithdrawCall;

  constructor(call: ETHWithdrawCall) {
    this._call = call;
  }
}

export class CloseSaleCall extends ethereum.Call {
  get inputs(): CloseSaleCall__Inputs {
    return new CloseSaleCall__Inputs(this);
  }

  get outputs(): CloseSaleCall__Outputs {
    return new CloseSaleCall__Outputs(this);
  }
}

export class CloseSaleCall__Inputs {
  _call: CloseSaleCall;

  constructor(call: CloseSaleCall) {
    this._call = call;
  }
}

export class CloseSaleCall__Outputs {
  _call: CloseSaleCall;

  constructor(call: CloseSaleCall) {
    this._call = call;
  }
}

export class CommitTokensCall extends ethereum.Call {
  get inputs(): CommitTokensCall__Inputs {
    return new CommitTokensCall__Inputs(this);
  }

  get outputs(): CommitTokensCall__Outputs {
    return new CommitTokensCall__Outputs(this);
  }
}

export class CommitTokensCall__Inputs {
  _call: CommitTokensCall;

  constructor(call: CommitTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CommitTokensCall__Outputs {
  _call: CommitTokensCall;

  constructor(call: CommitTokensCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
