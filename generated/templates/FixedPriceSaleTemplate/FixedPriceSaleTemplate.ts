// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TemplateInitialized extends ethereum.Event {
  get params(): TemplateInitialized__Params {
    return new TemplateInitialized__Params(this);
  }
}

export class TemplateInitialized__Params {
  _event: TemplateInitialized;

  constructor(event: TemplateInitialized) {
    this._event = event;
  }

  get tokenIn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensForSale(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minCommitment(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get maxCommitment(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get minRaise(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get participantList(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class FixedPriceSaleTemplate extends ethereum.SmartContract {
  static bind(address: Address): FixedPriceSaleTemplate {
    return new FixedPriceSaleTemplate("FixedPriceSaleTemplate", address);
  }

  aquaFactory(): Address {
    let result = super.call("aquaFactory", "aquaFactory():(address)", []);

    return result[0].toAddress();
  }

  try_aquaFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("aquaFactory", "aquaFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  encodedInitData(): Bytes {
    let result = super.call("encodedInitData", "encodedInitData():(bytes)", []);

    return result[0].toBytes();
  }

  try_encodedInitData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encodedInitData",
      "encodedInitData():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSaleCreated(): boolean {
    let result = super.call("isSaleCreated", "isSaleCreated():(bool)", []);

    return result[0].toBoolean();
  }

  try_isSaleCreated(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSaleCreated", "isSaleCreated():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metaDataContentHash(): string {
    let result = super.call(
      "metaDataContentHash",
      "metaDataContentHash():(string)",
      []
    );

    return result[0].toString();
  }

  try_metaDataContentHash(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "metaDataContentHash",
      "metaDataContentHash():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  saleLauncher(): Address {
    let result = super.call("saleLauncher", "saleLauncher():(address)", []);

    return result[0].toAddress();
  }

  try_saleLauncher(): ethereum.CallResult<Address> {
    let result = super.tryCall("saleLauncher", "saleLauncher():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  saleTemplateId(): BigInt {
    let result = super.call("saleTemplateId", "saleTemplateId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleTemplateId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "saleTemplateId",
      "saleTemplateId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  templateLauncher(): Address {
    let result = super.call(
      "templateLauncher",
      "templateLauncher():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_templateLauncher(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "templateLauncher",
      "templateLauncher():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  templateManager(): Address {
    let result = super.call(
      "templateManager",
      "templateManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_templateManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "templateManager",
      "templateManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  templateName(): string {
    let result = super.call("templateName", "templateName():(string)", []);

    return result[0].toString();
  }

  try_templateName(): ethereum.CallResult<string> {
    let result = super.tryCall("templateName", "templateName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenOut(): Address {
    let result = super.call("tokenOut", "tokenOut():(address)", []);

    return result[0].toAddress();
  }

  try_tokenOut(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenOut", "tokenOut():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenSupplier(): Address {
    let result = super.call("tokenSupplier", "tokenSupplier():(address)", []);

    return result[0].toAddress();
  }

  try_tokenSupplier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenSupplier",
      "tokenSupplier():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensForSale(): BigInt {
    let result = super.call("tokensForSale", "tokensForSale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensForSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensForSale",
      "tokensForSale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateSaleCall extends ethereum.Call {
  get inputs(): CreateSaleCall__Inputs {
    return new CreateSaleCall__Inputs(this);
  }

  get outputs(): CreateSaleCall__Outputs {
    return new CreateSaleCall__Outputs(this);
  }
}

export class CreateSaleCall__Inputs {
  _call: CreateSaleCall;

  constructor(call: CreateSaleCall) {
    this._call = call;
  }
}

export class CreateSaleCall__Outputs {
  _call: CreateSaleCall;

  constructor(call: CreateSaleCall) {
    this._call = call;
  }

  get newSale(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}
