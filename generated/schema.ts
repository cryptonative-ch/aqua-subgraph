// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AquaFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AquaFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AquaFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AquaFactory", id.toString(), this);
  }

  static load(id: string): AquaFactory | null {
    return store.get("AquaFactory", id) as AquaFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get saleCount(): i32 {
    let value = this.get("saleCount");
    return value.toI32();
  }

  set saleCount(value: i32) {
    this.set("saleCount", Value.fromI32(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get feeManager(): Bytes {
    let value = this.get("feeManager");
    return value.toBytes();
  }

  set feeManager(value: Bytes) {
    this.set("feeManager", Value.fromBytes(value));
  }

  get feeTo(): Bytes {
    let value = this.get("feeTo");
    return value.toBytes();
  }

  set feeTo(value: Bytes) {
    this.set("feeTo", Value.fromBytes(value));
  }

  get templateManager(): Bytes {
    let value = this.get("templateManager");
    return value.toBytes();
  }

  set templateManager(value: Bytes) {
    this.set("templateManager", Value.fromBytes(value));
  }

  get templateLauncher(): Bytes | null {
    let value = this.get("templateLauncher");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set templateLauncher(value: Bytes | null) {
    if (value === null) {
      this.unset("templateLauncher");
    } else {
      this.set("templateLauncher", Value.fromBytes(value as Bytes));
    }
  }

  get saleFee(): BigInt {
    let value = this.get("saleFee");
    return value.toBigInt();
  }

  set saleFee(value: BigInt) {
    this.set("saleFee", Value.fromBigInt(value));
  }

  get feeNumerator(): BigInt {
    let value = this.get("feeNumerator");
    return value.toBigInt();
  }

  set feeNumerator(value: BigInt) {
    this.set("feeNumerator", Value.fromBigInt(value));
  }

  get templateFee(): BigInt {
    let value = this.get("templateFee");
    return value.toBigInt();
  }

  set templateFee(value: BigInt) {
    this.set("templateFee", Value.fromBigInt(value));
  }
}

export class FairSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FairSale entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FairSale entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FairSale", id.toString(), this);
  }

  static load(id: string): FairSale | null {
    return store.get("FairSale", id) as FairSale | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get startDate(): i32 {
    let value = this.get("startDate");
    return value.toI32();
  }

  set startDate(value: i32) {
    this.set("startDate", Value.fromI32(value));
  }

  get endDate(): i32 {
    let value = this.get("endDate");
    return value.toI32();
  }

  set endDate(value: i32) {
    this.set("endDate", Value.fromI32(value));
  }

  get tokensForSale(): BigInt {
    let value = this.get("tokensForSale");
    return value.toBigInt();
  }

  set tokensForSale(value: BigInt) {
    this.set("tokensForSale", Value.fromBigInt(value));
  }

  get minimumBidAmount(): BigInt {
    let value = this.get("minimumBidAmount");
    return value.toBigInt();
  }

  set minimumBidAmount(value: BigInt) {
    this.set("minimumBidAmount", Value.fromBigInt(value));
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get minFundingThreshold(): i32 {
    let value = this.get("minFundingThreshold");
    return value.toI32();
  }

  set minFundingThreshold(value: i32) {
    this.set("minFundingThreshold", Value.fromI32(value));
  }

  get bids(): Array<string> | null {
    let value = this.get("bids");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bids(value: Array<string> | null) {
    if (value === null) {
      this.unset("bids");
    } else {
      this.set("bids", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class FairSaleUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FairSaleUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FairSaleUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FairSaleUser", id.toString(), this);
  }

  static load(id: string): FairSaleUser | null {
    return store.get("FairSaleUser", id) as FairSaleUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get ownerId(): i32 {
    let value = this.get("ownerId");
    return value.toI32();
  }

  set ownerId(value: i32) {
    this.set("ownerId", Value.fromI32(value));
  }
}

export class FairSaleBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FairSaleBid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FairSaleBid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FairSaleBid", id.toString(), this);
  }

  static load(id: string): FairSaleBid | null {
    return store.get("FairSaleBid", id) as FairSaleBid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get tokenInAmount(): BigInt {
    let value = this.get("tokenInAmount");
    return value.toBigInt();
  }

  set tokenInAmount(value: BigInt) {
    this.set("tokenInAmount", Value.fromBigInt(value));
  }

  get tokenOutAmount(): BigInt {
    let value = this.get("tokenOutAmount");
    return value.toBigInt();
  }

  set tokenOutAmount(value: BigInt) {
    this.set("tokenOutAmount", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class FixedPriceSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FixedPriceSale entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FixedPriceSale entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FixedPriceSale", id.toString(), this);
  }

  static load(id: string): FixedPriceSale | null {
    return store.get("FixedPriceSale", id) as FixedPriceSale | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get startDate(): i32 {
    let value = this.get("startDate");
    return value.toI32();
  }

  set startDate(value: i32) {
    this.set("startDate", Value.fromI32(value));
  }

  get endDate(): i32 {
    let value = this.get("endDate");
    return value.toI32();
  }

  set endDate(value: i32) {
    this.set("endDate", Value.fromI32(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get sellAmount(): BigInt {
    let value = this.get("sellAmount");
    return value.toBigInt();
  }

  set sellAmount(value: BigInt) {
    this.set("sellAmount", Value.fromBigInt(value));
  }

  get soldAmount(): BigInt {
    let value = this.get("soldAmount");
    return value.toBigInt();
  }

  set soldAmount(value: BigInt) {
    this.set("soldAmount", Value.fromBigInt(value));
  }

  get minimumRaise(): BigInt {
    let value = this.get("minimumRaise");
    return value.toBigInt();
  }

  set minimumRaise(value: BigInt) {
    this.set("minimumRaise", Value.fromBigInt(value));
  }

  get allocationMin(): BigInt {
    let value = this.get("allocationMin");
    return value.toBigInt();
  }

  set allocationMin(value: BigInt) {
    this.set("allocationMin", Value.fromBigInt(value));
  }

  get allocationMax(): BigInt {
    let value = this.get("allocationMax");
    return value.toBigInt();
  }

  set allocationMax(value: BigInt) {
    this.set("allocationMax", Value.fromBigInt(value));
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get commitments(): Array<string> | null {
    let value = this.get("commitments");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set commitments(value: Array<string> | null) {
    if (value === null) {
      this.unset("commitments");
    } else {
      this.set("commitments", Value.fromStringArray(value as Array<string>));
    }
  }

  get users(): Array<string> | null {
    let value = this.get("users");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set users(value: Array<string> | null) {
    if (value === null) {
      this.unset("users");
    } else {
      this.set("users", Value.fromStringArray(value as Array<string>));
    }
  }

  get withdrawals(): Array<string> | null {
    let value = this.get("withdrawals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdrawals(value: Array<string> | null) {
    if (value === null) {
      this.unset("withdrawals");
    } else {
      this.set("withdrawals", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class FixedPriceSaleCommitment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save FixedPriceSaleCommitment entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FixedPriceSaleCommitment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FixedPriceSaleCommitment", id.toString(), this);
  }

  static load(id: string): FixedPriceSaleCommitment | null {
    return store.get(
      "FixedPriceSaleCommitment",
      id
    ) as FixedPriceSaleCommitment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class FixedPriceSaleWithdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save FixedPriceSaleWithdrawal entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FixedPriceSaleWithdrawal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FixedPriceSaleWithdrawal", id.toString(), this);
  }

  static load(id: string): FixedPriceSaleWithdrawal | null {
    return store.get(
      "FixedPriceSaleWithdrawal",
      id
    ) as FixedPriceSaleWithdrawal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class FixedPriceSaleUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FixedPriceSaleUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FixedPriceSaleUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FixedPriceSaleUser", id.toString(), this);
  }

  static load(id: string): FixedPriceSaleUser | null {
    return store.get("FixedPriceSaleUser", id) as FixedPriceSaleUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get totalCommitment(): i32 {
    let value = this.get("totalCommitment");
    return value.toI32();
  }

  set totalCommitment(value: i32) {
    this.set("totalCommitment", Value.fromI32(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class SaleTemplate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SaleTemplate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SaleTemplate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SaleTemplate", id.toString(), this);
  }

  static load(id: string): SaleTemplate | null {
    return store.get("SaleTemplate", id) as SaleTemplate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get factory(): Bytes {
    let value = this.get("factory");
    return value.toBytes();
  }

  set factory(value: Bytes) {
    this.set("factory", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    return value.toBoolean();
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }
}

export class LaunchedSaleTemplate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LaunchedSaleTemplate entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LaunchedSaleTemplate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LaunchedSaleTemplate", id.toString(), this);
  }

  static load(id: string): LaunchedSaleTemplate | null {
    return store.get("LaunchedSaleTemplate", id) as LaunchedSaleTemplate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get template(): string {
    let value = this.get("template");
    return value.toString();
  }

  set template(value: string) {
    this.set("template", Value.fromString(value));
  }

  get metadataContentHash(): string | null {
    let value = this.get("metadataContentHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataContentHash(value: string | null) {
    if (value === null) {
      this.unset("metadataContentHash");
    } else {
      this.set("metadataContentHash", Value.fromString(value as string));
    }
  }
}

export class AquaLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AquaLog entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AquaLog entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AquaLog", id.toString(), this);
  }

  static load(id: string): AquaLog | null {
    return store.get("AquaLog", id) as AquaLog | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get content(): string {
    let value = this.get("content");
    return value.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }
}
