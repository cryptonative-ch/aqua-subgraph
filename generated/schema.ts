// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Auction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Auction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Auction", id.toString(), this);
  }

  static load(id: string): Auction | null {
    return store.get("Auction", id) as Auction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }

  get startTime(): i32 {
    let value = this.get("startTime");
    return value.toI32();
  }

  set startTime(value: i32) {
    this.set("startTime", Value.fromI32(value));
  }

  get endTime(): i32 {
    let value = this.get("endTime");
    return value.toI32();
  }

  set endTime(value: i32) {
    this.set("endTime", Value.fromI32(value));
  }

  get gracePeriod(): i32 {
    let value = this.get("gracePeriod");
    return value.toI32();
  }

  set gracePeriod(value: i32) {
    this.set("gracePeriod", Value.fromI32(value));
  }

  get tokenAmount(): i32 {
    let value = this.get("tokenAmount");
    return value.toI32();
  }

  set tokenAmount(value: i32) {
    this.set("tokenAmount", Value.fromI32(value));
  }

  get tokenIn(): string | null {
    let value = this.get("tokenIn");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenIn(value: string | null) {
    if (value === null) {
      this.unset("tokenIn");
    } else {
      this.set("tokenIn", Value.fromString(value as string));
    }
  }

  get tokenOut(): string | null {
    let value = this.get("tokenOut");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenOut(value: string | null) {
    if (value === null) {
      this.unset("tokenOut");
    } else {
      this.set("tokenOut", Value.fromString(value as string));
    }
  }

  get bids(): Array<string> | null {
    let value = this.get("bids");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bids(value: Array<string> | null) {
    if (value === null) {
      this.unset("bids");
    } else {
      this.set("bids", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class AuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionBid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionBid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionBid", id.toString(), this);
  }

  static load(id: string): AuctionBid | null {
    return store.get("AuctionBid", id) as AuctionBid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }

  get auction(): string | null {
    let value = this.get("auction");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auction(value: string | null) {
    if (value === null) {
      this.unset("auction");
    } else {
      this.set("auction", Value.fromString(value as string));
    }
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get deletedAt(): i32 {
    let value = this.get("deletedAt");
    return value.toI32();
  }

  set deletedAt(value: i32) {
    this.set("deletedAt", Value.fromI32(value));
  }

  get tokenInAmount(): i32 {
    let value = this.get("tokenInAmount");
    return value.toI32();
  }

  set tokenInAmount(value: i32) {
    this.set("tokenInAmount", Value.fromI32(value));
  }

  get tokenOutAmount(): i32 {
    let value = this.get("tokenOutAmount");
    return value.toI32();
  }

  set tokenOutAmount(value: i32) {
    this.set("tokenOutAmount", Value.fromI32(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(value as string));
    }
  }
}

export class AuctionToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionToken", id.toString(), this);
  }

  static load(id: string): AuctionToken | null {
    return store.get("AuctionToken", id) as AuctionToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auction(): string | null {
    let value = this.get("auction");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auction(value: string | null) {
    if (value === null) {
      this.unset("auction");
    } else {
      this.set("auction", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get icon(): string | null {
    let value = this.get("icon");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set icon(value: string | null) {
    if (value === null) {
      this.unset("icon");
    } else {
      this.set("icon", Value.fromString(value as string));
    }
  }

  get address(): string | null {
    let value = this.get("address");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class AuctionUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionUser", id.toString(), this);
  }

  static load(id: string): AuctionUser | null {
    return store.get("AuctionUser", id) as AuctionUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(value as string));
    }
  }
}
