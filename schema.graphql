# EntityMetadata
# Enforces important fields on each entity that implement this interface
interface EntityMetadata {
  # Contract address
  id: ID!
  # The UTC timestamp at which the auction was placed
  createdAt: Int!
  # The UTC timestamp at which the auction was updated
  updatedAt: Int!
  # The UTC timestamp at which the auction was deleted
  deletedAt: Int
}

#################################################

# MesaFactory
# Stores critical information the MesaFactory.
# Allows subgraph function to access the MesaFactory without knowing its address
type MesaFactory @entity {
  # ID: should be a unique easy-to-reference
  id: ID!
  # Auction
  saleCount: Int
  # Factory address
  address: String!
  # Fee manager: CFO
  feeManager: String!
  # Fee Collector: Treasury
  feeTo: String!
  # Template manager:
  templateManager: String!
  # Address of TemplateLauncher contract
  templateLauncher: String!
  # Fees
  saleFee: Int!
  feeNumerator: Int!
}

#################################################

# FairSale entity
type FairSale implements EntityMetadata @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  # Specific to the EasyAuction
  # The auction name
  name: String
  # open/ended/settled/upcoming
  status: String!
  # Date of the sale start
  startDate: Int
  # Date of the sale end
  endDate: Int
  # Total amount of tokens available for auctioning
  tokenAmount: Int
  # Minimum amount per bid
  minimumBidAmount: Int
  # Bidding token (ie: DAI, USDC)
  tokenIn: Token!
  # Auctioning token
  tokenOut: Token!
  # List of bids
  bids: [FairSaleBid!]
  # The minimal funding threshold for executing the settlement. If funding is not reached, everyone will get back their investment
  minFundingThreshold: Int
}

# AuctionBid
type FairSaleBid implements EntityMetadata @entity {
  id: ID!
  # submitted/settled/cancelled/claimed
  status: String!
  # The UTC timestamp at which the bid was placed
  createdAt: Int!
  # The UTC timestamp at which the bid was updated
  updatedAt: Int!
  # The UTC timestamp at which the bid was deleted
  deletedAt: Int
  # Int of tokens the investor wants to buy
  tokenInAmount: Int
  # Int of tokens the investor wants to buy
  tokenOutAmount: Int
  # The bidder's Ethereum address
  address: String
}

#################################################

# FixedPriceSale
type FixedPriceSale implements EntityMetadata @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  # The auction name
  name: String!
  # open/ended/settled/upcoming/cancelled/failed
  status: String!
  # Specific to the FixedPriceAuction
  startDate: Int! # Open timestamp
  endDate: Int! # Close timestamp
  # Amount to sell
  sellAmount: String!
  # Minimum amount per bid
  minimumRaise: Int!
  tokenIn: Token!
  tokenOut: Token!
  purchaes: [FixedPriceSalePurchase!]
}

type FixedPriceSalePurchase implements EntityMetadata @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  amount: Int
  # The buyer address EOA
  buyer: String
}

#################################################

# Token
type Token @entity {
  # Token address
  id: ID!
  # Token name, from the smart contract ERC20.name()
  name: String
  # ERC20 Token's contract address
  address: String
  # Symbol, from ERC20.symbol()
  symbol: String
  # Decimal, from ERC.decimals()
  decimals: Int
}

#################################################

type SaleUser @entity {
  # User id
  id: ID!
  # The bidder's Ethereum address
  address: String
}

#################################################

# Sale Templates
# Each Sale contract implements a template
type SaleTemplate @entity {
  # TemplatesId from the event
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  # Address of the SaleTemplate contract: either EasyAuction or FixedPriceSale
  address: String!
  # Address of the MesaFactory
  factory: String!
  # Template name
  name: SaleTemplateNames!
  verified: Boolean!
}

enum SaleTemplateNames {
  FairSaleTemplate
  FixedPriceSaleTemplate
}

# MesaLog beacuses The Graph internal logging does not work
type MesaLog @entity {
  id: ID!
  content: String!
}
