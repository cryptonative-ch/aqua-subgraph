# EntityMetadata
# Enforces important fields on each entity that implement this interface
interface EntityMetadata {
  # Contract address
  id: ID!
  # The UTC timestamp at which the auction was placed
  createdAt: Int!
  # The UTC timestamp at which the auction was updated
  updatedAt: Int!
  # The UTC timestamp at which the auction was deleted
  deletedAt: Int
}

#################################################

# AquaFactory
# Stores critical information the AquaFactory.
# Allows subgraph function to access the AquaFactory without knowing its address
type AquaFactory @entity {
  "ID: should be a unique easy-to-reference from the subgraph"
  id: ID!
  "Number of sales created via the factory"
  saleCount: Int!
  "AquaFactory contract address"
  address: Bytes!
  "Fee manager; CFO"
  feeManager: Bytes!
  "Fee Collector address: DAO/EOA/multisig"
  feeTo: Bytes!
  "Template manager address"
  templateManager: Bytes!
  "TemplateLauncher contract address"
  templateLauncher: Bytes
  "Fee for launching a new sale"
  saleFee: BigInt!
  feeNumerator: BigInt!
  "Fee for launching a new template"
  templateFee: BigInt!
}

enum SaleStatus {
  UPCOMING
  FAILED
  SETTLED
  CLOSED
  OPEN
}

# FixedPriceSale
type FixedPriceSale implements EntityMetadata @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "The name of the sale, default is the tokenIn's name"
  name: String!
  "Sale status: open/ended/settled/upcoming/cancelled/failed"
  status: SaleStatus!
  "The UTC timestamp at which the sale starts"
  startDate: Int! # Open timestamp
  "The UTC timestamp at which the sale closes"
  endDate: Int! # Close timestamp
  "Token price"
  tokenPrice: BigInt!
  "Amount of tokens to sell"
  sellAmount: BigInt!
  "Amount of tokens sold so far"
  soldAmount: BigInt!
  "Minimum raise threshold"
  minRaise: BigInt!
  "Minimum token amount per commitment"
  minCommitment: BigInt!
  "Maximum token amount per commitment"
  maxCommitment: BigInt!
  "Token investors can use to bid"
  tokenIn: Token!
  "Token investor get"
  tokenOut: Token!
  "List of sale commitments"
  commitments: [FixedPriceSaleCommitment!] @derivedFrom(field: "sale")
  "List of users"
  users: [FixedPriceSaleUser!] @derivedFrom(field: "sale")
  "List of withdrawals"
  withdrawals: [FixedPriceSaleWithdrawal!] @derivedFrom(field: "sale")
  "If true, sale was initialized with participant list"
  hasParticipantList: Boolean!
  "Reference to ParticipantList contract/entity."
  participantList: ParticipantList
  launchedTemplate: LaunchedSaleTemplate
}

enum FixedPriceSaleCommitmentStatus {
  SUBMITTED
  RELEASED
  CLAIMED
  PROCESSED
  WITHDRAWN
}

type FixedPriceSaleCommitment implements EntityMetadata @entity {
  "The commitment ID"
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "FixedPriceSale this commitment is associated with"
  sale: FixedPriceSale!
  "Address of buyer"
  user: FixedPriceSaleUser!
  "Amount of tokens"
  amount: BigInt!
  status: FixedPriceSaleCommitmentStatus!
}

# Withdrawal track the tokens that have been withdrawn
type FixedPriceSaleWithdrawal implements EntityMetadata @entity {
  "The withdrawal ID"
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "FixedPriceSale this withdrawal is associated with"
  sale: FixedPriceSale!
  "Address of buyer"
  user: FixedPriceSaleUser!
  "Amount of tokens"
  amount: BigInt!
  status: FixedPriceSaleCommitmentStatus!
}

type FixedPriceSaleUser implements EntityMetadata @entity {
  "The user's ID <saleAddress>/users/<saleUserAddress>"
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "Total commitments submitted in the sale"
  totalCommitment: Int!
  "Total volume for this user"
  totalVolume: BigInt!
  "FixedPriceSale reference"
  sale: FixedPriceSale!
  "Address of buyer"
  address: Bytes!
}

# Entity used to map listed participants
type ParticipantList implements EntityMetadata @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "Address of sale; and not a ref"
  sale: Bytes
  "Contract address"
  address: Bytes!
  "List of addresses that can add or remove participants"
  managers: [Bytes!]
  "List of participants allowed to partake in the sale"
  participants: [Participant!] @derivedFrom(field: "participantList")
}

# Entity used to map listed participants
type Participant implements EntityMetadata @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "Reference to ParticipantList"
  participantList: ParticipantList!
  address: Bytes!
  amount: BigInt!
}

#################################################

# Token
type Token @entity {
  "Token address"
  id: ID!
  "Token name, from the smart contract ERC20.name()"
  name: String
  "The token symbol from ERC20.symbol()"
  symbol: String
  "The token decimals, from ERC.decimals()"
  decimals: BigInt!
}

#################################################

# Sale Templates
# Each Sale contract implements a template
type SaleTemplate @entity {
  # TemplatesId from the event
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  # Address of the SaleTemplate contract: either EasyAuction or FixedPriceSale
  address: Bytes!
  # Address of the AquaFactory
  factory: Bytes!
  # Template name
  name: String! # Name can be anything
  verified: Boolean!
}

# Sale Templates
# Each Sale contract implements a template
type LaunchedSaleTemplate @entity {
  "Address of the template"
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "Address of the SaleTemplate contract: either EasyAuction or FixedPriceSale"
  address: Bytes!
  "Factory"
  factory: AquaFactory!
  "The original Sale Template this was created from"
  template: SaleTemplate!
  "IPFS content hash"
  metadataContentHash: String
  "Whether the template is initialized"
  initialized: Boolean!
  "Whether the sale contract is deployed"
  saleCreated: Boolean!
}

# AquaLog beacuses The Graph internal logging does not work
type AquaLog @entity {
  id: ID!
  content: String!
}
